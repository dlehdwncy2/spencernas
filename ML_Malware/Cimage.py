import  os , sys, cv2
from PIL import Image
import pefile
import binascii
import pandas as pd


class convert_binary_to_image:
    def __init__(self,filename):
        self.filename=filename



    def binary_value_get(self,sub_filename=None):
        Bin_value = []
        if sub_filename!=None:
            with open(sub_filename, 'rb') as file_object:
                data = file_object.read(1)
                while data != b"":
                    try:
                        Bin_value.append(chr(ord(data)))
                    except TypeError:
                        pass
                    data = file_object.read(1)
                return Bin_value



        with open(self.filename,'rb') as file_object:
            data=file_object.read(1)
            while data !=b"":
                try:
                    Bin_value.append(chr(ord(data)))
                except TypeError:
                    pass
                data=file_object.read(1)
            return Bin_value

    def createGreyScaleImageSpecificWith(self,dataSet,outputfilename,width=0):

        if (width == 0):
            size = len(dataSet)

            if (size < 10240) :
                width = 32
            elif (10240 <= size <= 10240*3 ):
                width = 64
            elif (10240*3 <= size <= 10240*6 ):
                width = 128
            elif (10240*6 <= size <= 10240*10 ):
                width = 256
            elif (10240*10 <= size <= 10240*20 ):
                width = 384
            elif (10240*20 <= size <= 10240*50 ):
                width = 512
            elif (10240*50 <= size <= 10240*100 ):
                width = 768
            else :
                width = 1024

        height = int(size/width)+1
        image = Image.new('L', (width,height))
        image.putdata(dataSet)
        imagename = outputfilename
        #image.save(imagename)
        #image.show()

    def signature_confirm(self):

        try:
            pe = pefile.PE(self.filename)
            pe.close()
            return True
        except:
            signature = []
            with open(self.filename, "rb") as f:
                for i in range(0, 2):
                    byte = f.read(1)
                    signature.append(byte.decode(errors='replace').strip())

            f.close()
            if 'M' in signature:
                if 'Z' in signature:
                    return True
                else:
                    return False

    def extratcion_bitmap(self):

        extraction_width = 100

        #학습 이미지 크기
        Lean_Width = 256
        Lean_Height = 256


        full_filename = self.filename
        f_handle = open(full_filename, "rb")
        file_data = f_handle.read()
        size_data = 100-(len(file_data) % 100)
        if(size_data!=100):
            Extraction_height = (len(file_data)+size_data)//100
        else:
            Extraction_height = (len(file_data))//100
        f_handle.close()

        a_handle = open(full_filename,"ab")
        if(size_data!=100): [a_handle.write('m'.encode()) for _ in range(0,size_data)]
        a_handle.close()

        r_handle=open(full_filename, "rb")
        data = r_handle.read()
        image = Image.frombytes('L', (extraction_width, Extraction_height ), data)

        image_save_full_path=os.path.join(self.filename+'.bmp')
        image.save(image_save_full_path)

        r_handle.close()

        Lean_img= cv2.imread(image_save_full_path, cv2.IMREAD_UNCHANGED)

        img_height, img_width = Lean_img.shape

        a = []
        [a.append(Lean_img[i, j]) for j in range(img_width) for i in range(img_height)]
        b = [[0] * 256 for i in range(256)]
        for i in range(len(a) - 2): b[a[i]][a[i + 1]] += 1
        c = sum(b, [])

        for i in range(len(c)):
            if c[i] > 10:c[i] = 255
            else:c[i] = 0
        image = Image.frombytes('L', (Lean_Width, Lean_Height), bytes(c))
        image.save(image_save_full_path)

        Bin_value=self.binary_value_get(image_save_full_path)
        os.remove(image_save_full_path)
        return ''.join(Bin_value)



if __name__=="__main__":
    file_name="D:\\Allinone\\BOB\\Python\\Tensflow\\samples\\mal_samples\\\Bluenoroff\\ec44ecd57401b3c78d849115f08ff046011b6eb933898203b7641942d4ee3af9"
    p_file=convert_binary_to_image(file_name)
    p_file.signature_confirm()  # EXE 파일 검증
    image_save_full_path_list=p_file.extratcion_bitmap() # bitmap extraction


    #p_file.csv_save(image_save_full_path_list)