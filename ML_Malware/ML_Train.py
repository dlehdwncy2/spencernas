#Internel import
import sys
import numpy as np
import os
import time
import datetime

#export import
import tensorflow as tf
from text_cnn import TextCNN
from tensorflow.contrib import learn

#Create import
import data_helpers
import pe_analyzer
import Data_base
import eval



# Parameters
# ==================================================

# Model Hyperparameters
tf.flags.DEFINE_integer("embedding_dim", 128, "Dimensionality of character embedding (default: 128)")
tf.flags.DEFINE_string("filter_sizes", "2,3,4", "Comma-separated filter sizes (default: '3,4,5')")
tf.flags.DEFINE_integer("num_filters", 128, "Number of filters per filter size (default: 128)")
tf.flags.DEFINE_float("dropout_keep_prob", 0.5, "Dropout keep probability (default: 0.5)")
tf.flags.DEFINE_float("l2_reg_lambda", 0.0, "L2 regularizaion lambda (default: 0.0)")

# Training parameters
tf.flags.DEFINE_integer("batch_size", 64, "Batch Size (default: 64)")
tf.flags.DEFINE_integer("num_epochs", 200, "Number of training epochs (default: 200)")
tf.flags.DEFINE_integer("evaluate_every", 20, "Evaluate model on dev set after this many steps (default: 100)")
tf.flags.DEFINE_integer("checkpoint_every", 200, "Save model after this many steps (default: 100)")
# Misc Parameters
tf.flags.DEFINE_boolean("allow_soft_placement", True, "Allow device soft device placement")
tf.flags.DEFINE_boolean("log_device_placement", False, "Log placement of ops on devices")

FLAGS = tf.flags.FLAGS
#FLAGS._parse_flags()
FLAGS (sys.argv)
'''
print("\nParameters:")
for attr, value in sorted(FLAGS.__flags.items()):
    print("{}={}".format(attr.upper(), value))
'''

# Data Preparatopn
# ==================================================
# Load data

class ML_train:
    def __init__(self):
        self.txt_path = "D:\\Allinone\\BOB\\Python\\Tensflow\\samples\\mal_samples\\mal_data.txt"
        self.mal_directory_path = "D:\\Allinone\\BOB\\Python\\Tensflow\\samples\\mal_samples"
        self.colum_list = ['pe_sha256', 'pe_groups', 'pe_md5',
                           'pe_Characteristics', 'pe_PeFileType', 'pe_StoredChecksum',
                           'pe_SectionAlignment', 'pe_sectioninfo', 'pe_importdll', 'pe_strings', 'pe_pdb',
                           'pe_imphash', 'pe_codesign', 'pe_section_entropy', 'pe_richheader', 'pe_random', 'pe_tags', 'pe_section_data']

        self.DB=Data_base.Databases()
        #self.DB.save_db()
        self.db_data_list=self.DB.read_db()


    def get_sample_data(self):
        text_X = []
        label = []
        r_label = []
        detect_and_num = {}
        null=None

        for line in self.db_data_list:
            #Create X
            text_val=''
            for json_key in line.keys():
                if line[json_key]==None:
                    continue

                elif type(line[json_key])==dict:
                    for dict_data in line[json_key].keys():
                        if type(line[json_key][dict_data])==list:
                            text_val=text_val+' '.join([str(dict_value) for dict_value in line[json_key][dict_data] if dict_value!=None or dict_value!=null])
                        else:
                            if line[json_key][dict_data]!=null or line[json_key][dict_data]!=None:
                                text_val = text_val +str(line[json_key][dict_data])

                elif type(line[json_key])==list:
                    text_val = text_val +' '.join(line[json_key])
                elif type(line[json_key])==str:
                    text_val = text_val + line[json_key]
            text_X.append(text_val)

            #Create Y
            detect_val = line['pe_groups']

            if len(detect_and_num) == 0:
                detect_and_num[detect_val] = 1

            if detect_val not in detect_and_num.keys():
                current_max = detect_and_num[max(detect_and_num, key=detect_and_num.get)]
                detect_and_num[detect_val] = current_max + 1
            #라벨은 숫자로 표현
            label.append(detect_and_num[detect_val])

        #라벨 내 최고 숫자 뽑음
        max_num = max(label)
        for l_num in label:
            lst = [0 for _ in range(max_num)]
            lst[-l_num] = 1
            r_label.append(lst)

        r_label = np.array(r_label)

        #detect_and_num == {'windows': 1, 'ubuntu': 2, 'linux': 3}

        return text_X, r_label, detect_and_num

    def Train(self):
        print("Loading data...")
        x_text, y, dict_z = self.get_sample_data()

        # Build vocabulary
        max_document_length = max([len(x.split(" ")) for x in x_text])
        vocab_processor = learn.preprocessing.VocabularyProcessor(max_document_length)
        x = np.array(list(vocab_processor.fit_transform(x_text)))

        # Randomly shuffle data
        np.random.seed(10)
        shuffle_indices = np.random.permutation(np.arange(len(y)))
        x_shuffled = x[shuffle_indices]
        y_shuffled = y[shuffle_indices]

        # Split train/test set
        # TODO: This is very crude, should use cross-validation
        cut = int(len(x_shuffled) * 0.90)

        x_train, x_dev = x_shuffled[:cut], x_shuffled[cut:]
        y_train, y_dev = y_shuffled[:cut], y_shuffled[cut:]
        print("Data Size: {:d}".format(len(x_shuffled)))
        print("Label Size: {:d}".format(len(dict_z)))
        print("Vocabulary Size: {:d}".format(len(vocab_processor.vocabulary_)))
        print("Train/Dev split: {:d}/{:d}".format(len(y_train), len(y_dev)))
        # data set make end


        # Training
        # ==================================================

        with tf.Graph().as_default():
            session_conf = tf.ConfigProto(
                allow_soft_placement=FLAGS.allow_soft_placement,
                log_device_placement=FLAGS.log_device_placement)
            sess = tf.Session(config=session_conf)
            with sess.as_default():
                cnn = TextCNN(
                    sequence_length=x_train.shape[1],
                    num_classes=y_train.shape[1],
                    vocab_size=len(vocab_processor.vocabulary_),
                    embedding_size=FLAGS.embedding_dim,
                    filter_sizes=list(map(int, FLAGS.filter_sizes.split(","))),
                    num_filters=FLAGS.num_filters,
                    l2_reg_lambda=FLAGS.l2_reg_lambda)

                # Define Training procedure
                global_step = tf.Variable(0, name="global_step", trainable=False)
                optimizer = tf.train.AdamOptimizer(1e-3)
                grads_and_vars = optimizer.compute_gradients(cnn.loss)
                train_op = optimizer.apply_gradients(grads_and_vars, global_step=global_step)

                # Keep track of gradient values and sparsity (optional)
                grad_summaries = []
                for g, v in grads_and_vars:
                    if g is not None:
                        grad_hist_summary = tf.summary.histogram("{}/grad/hist".format(v.name), g)
                        sparsity_summary = tf.summary.scalar("{}/grad/sparsity".format(v.name), tf.nn.zero_fraction(g))
                        grad_summaries.append(grad_hist_summary)
                        grad_summaries.append(sparsity_summary)
                grad_summaries_merged = tf.summary.merge(grad_summaries)

                # Output directory for models and summaries
                timestamp = str(int(time.time()))
                out_dir = os.path.abspath(os.path.join(os.path.curdir, "runs", timestamp))
                print("Writing to {}\n".format(out_dir))

                # Summaries for loss and accuracy
                loss_summary = tf.summary.scalar("loss", cnn.loss)
                acc_summary = tf.summary.scalar("accuracy", cnn.accuracy)

                # Train Summaries
                train_summary_op = tf.summary.merge([loss_summary, acc_summary, grad_summaries_merged])
                train_summary_dir = os.path.join(out_dir, "summaries", "train")
                train_summary_writer = tf.summary.FileWriter(train_summary_dir, sess.graph)

                # Dev summaries
                dev_summary_op = tf.summary.merge([loss_summary, acc_summary])
                dev_summary_dir = os.path.join(out_dir, "summaries", "dev")
                dev_summary_writer = tf.summary.FileWriter(dev_summary_dir, sess.graph)

                # Checkpoint directory. Tensorflow assumes this directory already exists so we need to create it
                checkpoint_dir = os.path.abspath(os.path.join(out_dir, "checkpoints"))
                checkpoint_prefix = os.path.join(checkpoint_dir, "model")
                if not os.path.exists(checkpoint_dir):
                    os.makedirs(checkpoint_dir)
                saver = tf.train.Saver(tf.all_variables())

                # Write vocabulary
                vocab_processor.save(os.path.join(out_dir, "vocab"))

                # Initialize all variables
                sess.run(tf.initialize_all_variables())


                def train_step(x_batch, y_batch):
                    """
                    A single training step
                    """
                    feed_dict = {
                        cnn.input_x: x_batch,
                        cnn.input_y: y_batch,
                        cnn.dropout_keep_prob: FLAGS.dropout_keep_prob
                    }
                    _, step, summaries, loss, accuracy = sess.run(
                        [train_op, global_step, train_summary_op, cnn.loss, cnn.accuracy],
                        feed_dict)
                    time_str = datetime.datetime.now().isoformat()
                    print("{}: step {}, loss {:g}, acc {:g}".format(time_str, step, loss, accuracy))
                    train_summary_writer.add_summary(summaries, step)


                def dev_step(x_batch, y_batch, writer=None):
                    """
                    Evaluates model on a dev set
                    """
                    feed_dict = {
                        cnn.input_x: x_batch,
                        cnn.input_y: y_batch,
                        cnn.dropout_keep_prob: 1.0
                    }
                    step, summaries, loss, accuracy, predictions = sess.run(
                        [global_step, dev_summary_op, cnn.loss, cnn.accuracy, cnn.predictions],
                        feed_dict
                    )
                    time_str = datetime.datetime.now().isoformat()
                    print("{}: step {}, loss {:g}, acc {:g}".format(time_str, step, loss, accuracy))
                    '''
                    # compare data
                    max_dict_z = dict_z[max(dict_z, key=lambda i: dict_z[i])]
                    predict_list = []
                    true_list = []
                    o_x_list = []
                    for one_predict in predictions:
                        predict_list.append(dict_z.keys()[dict_z.values().index(max_dict_z - one_predict)])

                    for one_batch in y_batch:
                        true_list.append(dict_z.keys()[dict_z.values().index(max_dict_z - one_batch.tolist().index(1))])

                    for num in range(len(predict_list)):
                        if predict_list[num] == true_list[num]:
                            o_x_list.append("O")
                        else:
                            o_x_list.append("X")

                    print("[+] Ahnlab-V3 Detection [+]")
                    print(true_list)

                    print("[+] Leekyu Machine Detection [+]")
                    print(predict_list)

                    print(o_x_list)
                    '''

                    if writer:
                        writer.add_summary(summaries, step)


                # Generate batches
                batches = data_helpers.batch_iter(list(zip(x_train, y_train)), FLAGS.batch_size, FLAGS.num_epochs)
                # Training loop. For each batch...
                for batch in batches:
                    x_batch, y_batch = zip(*batch)
                    train_step(x_batch, y_batch)
                    current_step = tf.train.global_step(sess, global_step)
                    if current_step % FLAGS.evaluate_every == 0:
                        print("\nEvaluation:")
                        dev_step(x_dev, y_dev, writer=dev_summary_writer)
                    if current_step % FLAGS.checkpoint_every == 0:
                        path = saver.save(sess, checkpoint_prefix, global_step=current_step)
                        print("Saved model checkpoint to {}\n".format(path))


    def Analysis(self,checkpoint_dir ):
        print("Loading data...")
        x_text, y, dict_z = self.get_sample_data()
        eval_object=eval.Evaluat_class(checkpoint_dir,x_text[0])
        predictions_human_readable=eval_object.evaluating()
        print(predictions_human_readable)

if __name__=="__main__":
    train_object=ML_train()
    #train_object.Train()
    checkpoint_dir = "./runs/1557313724/checkpoints/"

    train_object.Analysis(checkpoint_dir)
    #text_X, r_label, detect_and_num=train_object.get_sample_data()

    #print(r_label)
    #print(detect_and_num)