import pefile
import os
import pe_analyzer
import sys
import re
import csv
import pandas as pd
import json
import codecs
import Cimage

class Databases:
    def __init__(self):
        self.txt_path = "D:\\Allinone\\BOB\\Python\\Tensflow\\samples\\mal_samples\\mal_data.txt"
        self.mal_directory_path = "D:\\Allinone\\BOB\\Python\\Tensflow\\samples\\mal_samples"
        #self.colum_list=['pe_sha256','pe_groups', 'pe_md5', 'pe_packed', 'pe_Subsystem', 'pe_ImageBase', 'pe_Characteristics', 'pe_PeFileType', 'pe_StoredChecksum', 'pe_FileAlignment', 'pe_EntryPoint', 'pe_SectionAlignment', 'pe_sectioninfo', 'pe_importdll', 'pe_success', 'pe_strings', 'pe_pdb', 'pe_imphash', 'pe_codesign', 'pe_section_entropy', 'pe_richheader', 'pe_random', 'pe_tags', 'pe_section_data']

        self.colum_list = ['pe_sha256', 'pe_groups', 'pe_md5',
                           'pe_Characteristics', 'pe_PeFileType', 'pe_StoredChecksum',
                           'pe_SectionAlignment', 'pe_sectioninfo', 'pe_importdll', 'pe_strings', 'pe_pdb',
                           'pe_imphash', 'pe_codesign', 'pe_section_entropy', 'pe_richheader', 'pe_random', 'pe_tags', 'pe_section_data']

    def data_export(self,mal_sample_full_path,group_name=None):
        result_pe_info_json={}
        self.CVimage = Cimage.convert_binary_to_image(mal_sample_full_path)
        PE_confirm=self.CVimage.signature_confirm()
        if PE_confirm==True:
            Image_binary=self.CVimage.extratcion_bitmap()
            result_pe_info_json['Image_base']=str(Image_binary)
            result_pe_info_json['pe_groups'] = group_name
            return result_pe_info_json
        else:
            return False

        '''
        result_pe_info_json=pe_analyzer.result_all(mal_sample_full_path)
        del(result_pe_info_json['pe_sha256'])
        del (result_pe_info_json['pe_md5'])
        del (result_pe_info_json['pe_Characteristics'])
        del (result_pe_info_json['pe_Subsystem'])
        del (result_pe_info_json['pe_ImageBase'])
        del (result_pe_info_json['pe_PeFileType'])
        del (result_pe_info_json['pe_EntryPoint'])
        del (result_pe_info_json['pe_SectionAlignment'])
        del (result_pe_info_json['pe_success'])
        del (result_pe_info_json['pe_random'])
        '''




    def save_db(self):
        txt_file=open(self.txt_path,'w')

        mal_group_directory_full_path_list = [os.path.join(self.mal_directory_path, mal_group) for mal_group in os.listdir(self.mal_directory_path) if os.path.isdir(os.path.join(self.mal_directory_path, mal_group))]

        for mal_group_directory in mal_group_directory_full_path_list:
            mal_sample_full_path_list=[os.path.join(mal_group_directory,mal_sample) for mal_sample in os.listdir(mal_group_directory)]
            group_name=os.path.basename(mal_group_directory)
            success_count=0
            print("Groups : {}".format(group_name))
            for mal_sample_full_path in mal_sample_full_path_list:

                result_pe_info_json=self.data_export(mal_sample_full_path,group_name)
                if result_pe_info_json==False:
                    continue

                json_data=json.dumps(result_pe_info_json,  ensure_ascii=False)
                txt_file.write(json_data+'\n')
                success_count += 1

            print("\tSuccess : {} / {} ".format(success_count,len(mal_sample_full_path_list)))

        txt_file.close()

    def read_db(self):
        with codecs.open(self.txt_path, 'r', errors='ignore') as data:

            return [json.loads(line) for line in data]




if __name__=="__main__":
    DB_class=Databases()
    #DB_class.save_db()
    returns=DB_class.read_db()
    print(json.dumps(returns[0],indent=4))